package{  import flash.display.*;  import flash.events.*;  import flash.net.URLRequest;  import flash.system.ApplicationDomain;  import flash.system.LoaderContext;  /**   *  This is a simple bootstrapper that is able to load the BulkLoader inspector into a regular flash swf.   *  This code was taken from Jim Armstrong (algorithmist.wordpress.com)   *     *  @langversion ActionScript 3   *  @playerversion Flash 9.0.0   *   */  public class Bootstrapper extends Sprite  {    private var __loadedClip:MovieClip;     // loaded content cast as MovieClip	private var __loader:Loader;            // reference to external asset loader    private var __application:*;            // reference to loaded application (<mx:Application>)    public function Bootstrapper()    {      __loadedClip = null;	  	  __loader            = new Loader();      var info:LoaderInfo = __loader.contentLoaderInfo;      info.addEventListener(Event.COMPLETE        , __onComplete);      info.addEventListener(IOErrorEvent.IO_ERROR , __onIOError );	}    public function load(_file:String):void	{      var urlRequest:URLRequest = new URLRequest(_file);			      var loaderContext:LoaderContext = new LoaderContext();      loaderContext.applicationDomain = ApplicationDomain.currentDomain;			      __loader.load(urlRequest, loaderContext);    }	private function __onComplete(_evt:Event):void    {       addChild(__loader);      __loadedClip = __loader.content as MovieClip;      __loadedClip.addEventListener(Event.ENTER_FRAME, __onFlexAppLoaded);    }    // poll loaded Flex clip until application property is set (Flex completes its own internal initialization)    private function __onFlexAppLoaded(_evt:Event):void    {      if( __loadedClip.application != null )      {        __loadedClip.removeEventListener(Event.ENTER_FRAME, __onFlexAppLoaded);         __application = __loadedClip.application;        addChild(__loadedClip);	  }	}    private function __cleanup():void    {      var info:LoaderInfo = __loader.contentLoaderInfo;      info.removeEventListener(Event.COMPLETE, __onComplete);      info.removeEventListener(IOErrorEvent.IO_ERROR , __onIOError );    }    private function __onIOError(_evt:IOErrorEvent):void    {      trace( "io error - check file names and location" );	}    private function __onInitialize(_e:Event):void    {      __cleanup();    }  }}